import{_ as s,o,c as a,N as e}from"./chunks/framework.fcd62fc8.js";const h=JSON.parse('{"title":"Autocomplete utils","description":"Autocomplete utils for UnoCSS (@unocss/autocomplete).","frontmatter":{"title":"Autocomplete utils","description":"Autocomplete utils for UnoCSS (@unocss/autocomplete)."},"headers":[],"relativePath":"tools/autocomplete.md","lastUpdated":1681962075000}'),l={name:"tools/autocomplete.md"},n=e(`<h1 id="autocomplete" tabindex="-1">Autocomplete <a class="header-anchor" href="#autocomplete" aria-label="Permalink to &quot;Autocomplete&quot;">​</a></h1><p>Autocomplete utils for UnoCSS: <code>@unocss/autocomplete</code>. This is embedded in the <a href="/play" target="_blank" rel="noreferrer">playground</a> and the <a href="/unocss-docs-cn/integrations/vscode">VS Code extension</a>.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><h3 id="static-rules" tabindex="-1">Static rules <a class="header-anchor" href="#static-rules" aria-label="Permalink to &quot;Static rules&quot;">​</a></h3><p>Static rules like this will just work without any configuration.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">rules</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[[</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">flex</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{ </span><span style="color:#B8A965;">display</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">flex</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;"> }]]</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">rules</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">flex</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">display</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">flex</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> }]]</span></span></code></pre></div><h3 id="dynamic-rules" tabindex="-1">Dynamic rules <a class="header-anchor" href="#dynamic-rules" aria-label="Permalink to &quot;Dynamic rules&quot;">​</a></h3><p>For dynamic rules, you can provide an extra <code>meta</code> object to the rule and specify the autocomplete template.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">rules</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">/</span><span style="color:#4D9375;">^</span><span style="color:#C4704F;">m-</span><span style="color:#666666;">(</span><span style="color:#C99076;">\\d</span><span style="color:#666666;">)</span><span style="color:#4D9375;">$</span><span style="color:#C98A7D99;">/</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">([,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">d</span><span style="color:#666666;">])</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">({ </span><span style="color:#B8A965;">margin</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">\`</span><span style="color:#666666;">\${</span><span style="color:#C98A7D;">d </span><span style="color:#CB7676;">/</span><span style="color:#C98A7D;"> </span><span style="color:#4C9A91;">4</span><span style="color:#666666;">}</span><span style="color:#C98A7D;">rem</span><span style="color:#C98A7D99;">\`</span><span style="color:#666666;"> }),</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">{ </span><span style="color:#B8A965;">autocomplete</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">m-&lt;num&gt;</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;"> }</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// &lt;-- this</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#666666;">]</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">rules</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">/</span><span style="color:#1E754F;">^</span><span style="color:#AB5E3F;">m-</span><span style="color:#999999;">(</span><span style="color:#A65E2B;">\\d</span><span style="color:#999999;">)</span><span style="color:#1E754F;">$</span><span style="color:#B5695999;">/</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">([,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">d</span><span style="color:#999999;">])</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">({ </span><span style="color:#998418;">margin</span><span style="color:#999999;">: </span><span style="color:#B5695999;">\`</span><span style="color:#999999;">\${</span><span style="color:#B56959;">d </span><span style="color:#AB5959;">/</span><span style="color:#B56959;"> </span><span style="color:#2F798A;">4</span><span style="color:#999999;">}</span><span style="color:#B56959;">rem</span><span style="color:#B5695999;">\`</span><span style="color:#999999;"> }),</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">{ </span><span style="color:#998418;">autocomplete</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">m-&lt;num&gt;</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> }</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &lt;-- this</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">]</span></span></code></pre></div><p>The template uses a simple DSL to specify the autocomplete suggestions. The syntax is:</p><ul><li><code>(...|...)</code>: logic OR groups. <code>|</code> as the separator. Will be used as suggestions when the some of the groups match.</li><li><code>&lt;...&gt;</code>: built-in short hands. currently supports <code>&lt;num&gt;</code>, <code>&lt;percent&gt;</code> and <code>&lt;directions&gt;</code></li><li><code>$...</code>: theme inferring. for example, <code>$colors</code> will list all the properties of the <code>colors</code> object of the theme.</li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="example-1" tabindex="-1">Example 1 <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1&quot;">​</a></h3><ul><li><strong>Template</strong>: <code>(border|b)-(solid|dashed|dotted|double|hidden|none)</code></li><li><strong>Input</strong>: <code>b-do</code></li><li><strong>Suggestions</strong>: <code>b-dashed</code>, <code>b-double</code></li></ul><h3 id="example-2" tabindex="-1">Example 2 <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2&quot;">​</a></h3><ul><li><strong>Template</strong>: <code>m-&lt;num&gt;</code></li><li><strong>Input</strong>: <code>m-</code></li><li><strong>Suggestions</strong>: <code>m-1</code>, <code>m-2</code>, <code>m-3</code>…</li></ul><h3 id="example-3" tabindex="-1">Example 3 <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example 3&quot;">​</a></h3><ul><li><strong>Template</strong>: <code>text-$colors</code></li><li><strong>Input</strong>: <code>text-r</code></li><li><strong>Suggestions</strong>: <code>text-red</code>, <code>text-rose</code>…</li></ul><h3 id="example-4" tabindex="-1">Example 4 <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example 4&quot;">​</a></h3><p>For multiple templates:</p><ul><li><strong>Template</strong>: <code>[&#39;(border|b)-&lt;num&gt;&#39;, &#39;(border|b)-&lt;directions&gt;-&lt;num&gt;&#39;]</code></li><li><strong>Input</strong>: <code>b-</code></li><li><strong>Suggestions</strong>: <code>b-x</code>, <code>b-y</code>, <code>b-1</code>, <code>b-2</code>…</li><li><strong>Input</strong>: <code>b-x-</code></li><li><strong>Suggestions</strong>: <code>b-x-1</code>, <code>b-x-2</code>…</li></ul><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><ul><li>MIT License © 2021-PRESENT <a href="https://github.com/antfu" target="_blank" rel="noreferrer">Anthony Fu</a></li></ul>`,23),t=[n];function p(c,r,i,d,y,u){return o(),a("div",null,t)}const g=s(l,[["render",p]]);export{h as __pageData,g as default};
